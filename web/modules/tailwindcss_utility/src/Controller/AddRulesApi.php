<?php

declare(strict_types=1);

namespace Drupal\tailwindcss_utility\Controller;

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Drupal\Core\Site\Settings;
use Drupal\tailwindcss_utility\RuleStorage;
use Psr\Log\LoggerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;

class AddRulesApi extends ControllerBase implements ContainerInjectionInterface {

  /**
   * The tailwindcss_utility logger channel.
   */
  protected LoggerInterface $logger;

  /**
   * Tailwind rule storage service.
   */
  protected RuleStorage $ruleStorage;

  public function __construct(
    LoggerInterface $logger,
    RuleStorage $rule_storage
  ) {
    $this->logger = $logger;
    $this->ruleStorage = $rule_storage;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container): AddRulesApi {
    return new static(
      $container->get('logger.channel.tailwindcss_utility'),
      $container->get('tailwindcss_utility.rule_storage')
    );
  }

  public function addRules(Request $request): AjaxResponse {
    $rules = \json_decode($request->getContent(), TRUE);
    $response = new AjaxResponse();

    if ($rules === NULL) {
      $response->setData(['status' => FALSE]);
      return $response;
    }

    $missing_classes = [];
    foreach ($rules as $class => $class_rules) {
      if (\count($class_rules) === 0) {
        $missing_classes[] = $class;
        continue;
      }

      $add = TRUE;
      // Allow adding new rules only.
      if (\count($this->ruleStorage->classSearch($class, TRUE, TRUE)) !== 0) {
        $add = FALSE;
        $this->logger->warning('Attempted to add a css rule for a class that already exists: %class. This should not be a case with standard endpoint usage.', [
          '%class' => $class,
        ]);
      }
      // Validate content.
      foreach ($class_rules as $rule) {
        if (
          \strip_tags($rule['rule']) !== $rule['rule'] ||
          (\array_key_exists('atrule', $rule) && \strip_tags($rule['atrule']) !== $rule['atrule'])
        ) {
          $add = FALSE;
          $this->logger->warning('Attempted to add a css rule with disallowed content: %rule.', [
            '%rule' => $rule,
          ]);
          break;
        }
      }
      if ($add) {
        $this->ruleStorage->addRule($class, $class_rules);
      }
    }
    // The value 'placeholder' is a very common drupal specific class to ignore.
    $missing_safe_list = Settings::get('tailwind_missing_safelist', ['placeholder']);
    $missing_classes = \array_diff($missing_classes, $missing_safe_list);
    if (\count($missing_classes) !== 0 && Settings::get('tailwind_missing_classes_warning', TRUE)) {
      $this->logger->notice('The following classes could not be generated by Tailwind JS from Tailwind CDN: %classes. Please check your Tailwind configuration or spelling of class name.', [
        '%classes' => \implode(', ', $missing_classes),
      ]);
    }

    $response->setData(['status' => TRUE]);
    return $response;
  }


}
